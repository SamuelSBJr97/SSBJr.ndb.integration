@page "/docker-containers"
@inject SSBJr.ndb.integration.Web.Web.Services.DockerService DockerService

<h3>Gerenciamento de Containers Docker</h3>

@if (containers == null)
{
    <p>Carregando...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Imagem</th>
                <th>Status</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in containers)
            {
                <tr>
                    <td>@c.Names[0]</td>
                    <td>@c.Image</td>
                    <td>@c.Status</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => StartContainer(c.ID)">Iniciar</button>
                        <button class="btn btn-warning" @onclick="() => StopContainer(c.ID)">Parar</button>
                        <button class="btn btn-danger" @onclick="() => RemoveContainer(c.ID)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Docker.DotNet.Models.ContainerListResponse> containers;

    protected override async Task OnInitializedAsync()
    {
        containers = await DockerService.ListContainersAsync();
    }

    private async Task StartContainer(string id)
    {
        await DockerService.StartContainerAsync(id);
        containers = await DockerService.ListContainersAsync();
        StateHasChanged();
    }

    private async Task StopContainer(string id)
    {
        await DockerService.StopContainerAsync(id);
        containers = await DockerService.ListContainersAsync();
        StateHasChanged();
    }

    private async Task RemoveContainer(string id)
    {
        await DockerService.RemoveContainerAsync(id);
        containers = await DockerService.ListContainersAsync();
        StateHasChanged();
    }
}
