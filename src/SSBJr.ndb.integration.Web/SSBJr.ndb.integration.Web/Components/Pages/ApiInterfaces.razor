@page "/api-interfaces"
@using SSBJr.ndb.integration.Web.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Interfaces de API</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5 text-primary mb-2">
                        <i class="bi bi-layers"></i> Interfaces de API
                    </h1>
                    <p class="text-muted">Gerencie interfaces de API com GraphQL, REST e infraestrutura completa</p>
                </div>
                <button class="btn btn-primary btn-lg" @onclick="ShowCreateForm">
                    <i class="bi bi-plus-circle"></i> Nova Interface
                </button>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Total</h6>
                            <h3 class="mb-0">@(interfaces?.Count() ?? 0)</h3>
                        </div>
                        <i class="bi bi-layers fs-1 opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Em Execução</h6>
                            <h3 class="mb-0">@(interfaces?.Count(i => i.Status == ApiStatus.Running) ?? 0)</h3>
                        </div>
                        <i class="bi bi-play-circle fs-1 opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Implantando</h6>
                            <h3 class="mb-0">@(interfaces?.Count(i => i.Status == ApiStatus.Deploying) ?? 0)</h3>
                        </div>
                        <i class="bi bi-arrow-clockwise fs-1 opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">Com Falha</h6>
                            <h3 class="mb-0">@(interfaces?.Count(i => i.Status == ApiStatus.Failed) ?? 0)</h3>
                        </div>
                        <i class="bi bi-exclamation-triangle fs-1 opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filters -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" class="form-control" placeholder="Buscar interfaces..." @bind="searchQuery" @oninput="OnSearchChanged" />
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group">
                <button class="btn btn-outline-secondary" @onclick="LoadInterfaces">
                    <i class="bi bi-arrow-clockwise"></i> Atualizar
                </button>
                <button class="btn btn-outline-info" @onclick="ShowAuditLogs">
                    <i class="bi bi-journal-text"></i> Auditoria
                </button>
            </div>
        </div>
    </div>

    <!-- Interfaces List -->
    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
            <p class="mt-3">Carregando interfaces...</p>
        </div>
    }
    else if (interfaces == null || !interfaces.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-inbox display-1 text-muted mb-3"></i>
            <h3 class="text-muted">Nenhuma interface encontrada</h3>
            <p class="text-muted">Crie sua primeira interface de API para começar.</p>
            <button class="btn btn-primary btn-lg" @onclick="ShowCreateForm">
                <i class="bi bi-plus-circle"></i> Criar Interface
            </button>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var apiInterface in interfaces)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card h-100 border-start border-4 @GetStatusBorderClass(apiInterface.Status)">
                        <div class="card-header bg-light">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6 class="card-title mb-1 fw-bold">@apiInterface.Name</h6>
                                    <small class="text-muted">v@apiInterface.Version • @apiInterface.Type</small>
                                </div>
                                <span class="badge @GetStatusBadgeClass(apiInterface.Status) fs-6">
                                    @GetStatusIcon(apiInterface.Status) @apiInterface.Status
                                </span>
                            </div>
                        </div>
                        
                        <div class="card-body">
                            <p class="card-text text-muted small mb-3">@apiInterface.Description</p>
                            
                            <!-- Infrastructure Info -->
                            <div class="mb-3">
                                <div class="row g-2 small">
                                    <div class="col-6">
                                        <i class="bi bi-database text-info"></i>
                                        <span class="ms-1">@apiInterface.Infrastructure.Database.Type</span>
                                    </div>
                                    <div class="col-6">
                                        <i class="bi bi-hdd-stack text-warning"></i>
                                        <span class="ms-1">@apiInterface.Infrastructure.Cache.Type</span>
                                    </div>
                                    <div class="col-6">
                                        <i class="bi bi-envelope text-success"></i>
                                        <span class="ms-1">@apiInterface.Infrastructure.Messaging.Type</span>
                                    </div>
                                    <div class="col-6">
                                        <i class="bi bi-shield-check text-primary"></i>
                                        <span class="ms-1">@apiInterface.Security.Authentication.Type</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Tags -->
                            @if (apiInterface.Tags.Any())
                            {
                                <div class="mb-3">
                                    @foreach (var tag in apiInterface.Tags.Take(3))
                                    {
                                        <span class="badge bg-light text-dark me-1">#@tag</span>
                                    }
                                    @if (apiInterface.Tags.Count > 3)
                                    {
                                        <span class="badge bg-light text-dark">+@(apiInterface.Tags.Count - 3)</span>
                                    }
                                </div>
                            }

                            <!-- Error Message -->
                            @if (!string.IsNullOrEmpty(apiInterface.ErrorMessage))
                            {
                                <div class="alert alert-danger alert-sm mb-3">
                                    <small><i class="bi bi-exclamation-triangle"></i> @apiInterface.ErrorMessage</small>
                                </div>
                            }

                            <!-- Timestamps -->
                            <div class="small text-muted mb-3">
                                <div><i class="bi bi-calendar-event"></i> Criado: @apiInterface.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                                @if (apiInterface.UpdatedAt.HasValue)
                                {
                                    <div><i class="bi bi-pencil"></i> Atualizado: @apiInterface.UpdatedAt.Value.ToString("dd/MM/yyyy HH:mm")</div>
                                }
                            </div>
                        </div>

                        <div class="card-footer bg-transparent">
                            <div class="d-flex gap-1 flex-wrap">
                                <!-- Primary Actions -->
                                @if (apiInterface.Status == ApiStatus.Draft)
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => DeployInterface(apiInterface.Id)" title="Implantar">
                                        <i class="bi bi-rocket"></i>
                                    </button>
                                    <button class="btn btn-info btn-sm" @onclick="() => ValidateInterface(apiInterface.Id)" title="Validar">
                                        <i class="bi bi-check-circle"></i>
                                    </button>
                                }
                                else if (apiInterface.Status == ApiStatus.Running)
                                {
                                    <button class="btn btn-warning btn-sm" @onclick="() => StopInterface(apiInterface.Id)" title="Parar">
                                        <i class="bi bi-stop-circle"></i>
                                    </button>
                                    <button class="btn btn-secondary btn-sm" @onclick="() => RestartInterface(apiInterface.Id)" title="Reiniciar">
                                        <i class="bi bi-arrow-clockwise"></i>
                                    </button>
                                }
                                else if (apiInterface.Status == ApiStatus.Stopped)
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => DeployInterface(apiInterface.Id)" title="Iniciar">
                                        <i class="bi bi-play-circle"></i>
                                    </button>
                                }

                                <!-- Secondary Actions -->
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => EditInterface(apiInterface)" title="Editar">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-outline-info btn-sm" @onclick="() => ShowMetrics(apiInterface.Id)" title="Métricas">
                                    <i class="bi bi-graph-up"></i>
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ShowLogs(apiInterface.Id)" title="Logs">
                                    <i class="bi bi-file-text"></i>
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteInterface(apiInterface.Id)" title="Deletar">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingInterface != null ? "Editar Interface" : "Nova Interface")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <ApiInterfaceForm Model="@currentInterface" OnSubmit="@SaveInterface" OnCancel="@HideModal" />
                </div>
            </div>
        </div>
    </div>
}

<!-- Notifications -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
    @foreach (var notification in notifications.TakeLast(3))
    {
        <div class="toast show mb-2 border-start border-4 @GetNotificationBorderClass(notification.Type)" role="alert">
            <div class="toast-header">
                <i class="bi @GetNotificationIcon(notification.Type) me-2"></i>
                <strong class="me-auto">@notification.Title</strong>
                <small>@notification.Timestamp.ToString("HH:mm:ss")</small>
            </div>
            <div class="toast-body">
                @notification.Message
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<ApiInterface>? interfaces;
    private bool loading = true;
    private string searchQuery = string.Empty;
    private bool showModal = false;
    private ApiInterface? editingInterface;
    private ApiInterfaceCreateRequest currentRequest = new();
    private ApiInterfaceCreateRequest currentInterface = new();
    private string selectedApiId = string.Empty;
    private List<NotificationItem> notifications = new();
    private HubConnection? hubConnection;

    private Timer? searchTimer;

    public class NotificationItem
    {
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInterfaces();
        await ConnectToSignalR();
    }

    private async Task LoadInterfaces()
    {
        try
        {
            loading = true;
            StateHasChanged();

            var url = $"/api/interfaces?search={Uri.EscapeDataString(searchQuery)}";
            var response = await Http.GetAsync(url);
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                interfaces = JsonSerializer.Deserialize<List<ApiInterface>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro ao carregar interfaces: {ex.Message}", "error");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadInterfaces();
                StateHasChanged();
            });
        }, null, TimeSpan.FromMilliseconds(500), Timeout.InfiniteTimeSpan);
    }

    private void ShowCreateForm()
    {
        editingInterface = null;
        currentRequest = new ApiInterfaceCreateRequest();
        showModal = true;
    }

    private void EditInterface(ApiInterface apiInterface)
    {
        editingInterface = apiInterface;
        currentRequest = new ApiInterfaceCreateRequest
        {
            Name = apiInterface.Name,
            Description = apiInterface.Description,
            Type = apiInterface.Type,
            Version = apiInterface.Version,
            GraphQLSchema = apiInterface.GraphQLSchema,
            SwaggerJson = apiInterface.SwaggerJson,
            Infrastructure = apiInterface.Infrastructure,
            Security = apiInterface.Security,
            Monitoring = apiInterface.Monitoring,
            Tags = apiInterface.Tags,
            Metadata = apiInterface.Metadata
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingInterface = null;
    }

    private async Task SaveInterface()
    {
        try
        {
            string url;
            HttpResponseMessage response;
            
            var json = JsonSerializer.Serialize(currentRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            if (editingInterface != null)
            {
                // Update
                url = $"/api/interfaces/{editingInterface.Id}";
                response = await Http.PutAsync(url, content);
            }
            else
            {
                // Create
                url = "/api/interfaces";
                response = await Http.PostAsync(url, content);
            }

            if (response.IsSuccessStatusCode)
            {
                HideModal();
                await LoadInterfaces();
                AddNotification("Sucesso", 
                    editingInterface != null ? "Interface atualizada com sucesso!" : "Interface criada com sucesso!", 
                    "success");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                AddNotification("Erro", $"Erro ao salvar interface: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro: {ex.Message}", "error");
        }
    }

    private async Task DeployInterface(Guid id)
    {
        try
        {
            var response = await Http.PostAsync($"/api/interfaces/{id}/deploy", null);
            if (response.IsSuccessStatusCode)
            {
                AddNotification("Sucesso", "Implantação iniciada!", "success");
                await LoadInterfaces();
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro ao implantar: {ex.Message}", "error");
        }
    }

    private async Task StopInterface(Guid id)
    {
        try
        {
            var response = await Http.PostAsync($"/api/interfaces/{id}/stop", null);
            if (response.IsSuccessStatusCode)
            {
                AddNotification("Sucesso", "Interface parada!", "success");
                await LoadInterfaces();
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro ao parar: {ex.Message}", "error");
        }
    }

    private async Task RestartInterface(Guid id)
    {
        try
        {
            var response = await Http.PostAsync($"/api/interfaces/{id}/restart", null);
            if (response.IsSuccessStatusCode)
            {
                AddNotification("Sucesso", "Interface reiniciada!", "success");
                await LoadInterfaces();
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro ao reiniciar: {ex.Message}", "error");
        }
    }

    private async Task ValidateInterface(Guid id)
    {
        try
        {
            var response = await Http.PostAsync($"/api/interfaces/{id}/validate", null);
            if (response.IsSuccessStatusCode)
            {
                AddNotification("Sucesso", "Validação concluída!", "success");
                await LoadInterfaces();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                AddNotification("Erro", $"Erro de validação: {error}", "error");
            }
        }
        catch (Exception ex)
        {
            AddNotification("Erro", $"Erro ao validar: {ex.Message}", "error");
        }
    }

    private async Task DeleteInterface(Guid id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja deletar esta interface?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/interfaces/{id}");
                if (response.IsSuccessStatusCode)
                {
                    AddNotification("Sucesso", "Interface deletada!", "success");
                    await LoadInterfaces();
                }
            }
            catch (Exception ex)
            {
                AddNotification("Erro", $"Erro ao deletar: {ex.Message}", "error");
            }
        }
    }

    private async Task ShowMetrics(Guid id)
    {
        Navigation.NavigateTo($"/metrics/{id}");
    }

    private async Task ShowLogs(Guid id)
    {
        Navigation.NavigateTo($"/logs/{id}");
    }

    private async Task ShowAuditLogs()
    {
        Navigation.NavigateTo("/audit");
    }

    private async Task ConnectToSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/notifications"))
                .Build();

            hubConnection.On<object>("InterfaceStatusChanged", async (data) =>
            {
                AddNotification("Status", "Status da interface atualizado", "info");
                await LoadInterfaces();
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<object>("Error", (data) =>
            {
                var json = JsonSerializer.Serialize(data);
                var notification = JsonSerializer.Deserialize<Dictionary<string, object>>(json);
                AddNotification("Erro", notification?["Message"]?.ToString() ?? "Erro desconhecido", "error");
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            AddNotification("Aviso", $"Conexão com notificações falhou: {ex.Message}", "warning");
        }
    }

    private void AddNotification(string title, string message, string type)
    {
        notifications.Add(new NotificationItem
        {
            Title = title,
            Message = message,
            Type = type,
            Timestamp = DateTime.Now
        });

        if (notifications.Count > 10)
        {
            notifications.RemoveAt(0);
        }

        StateHasChanged();
    }

    private string GetStatusBadgeClass(ApiStatus status) => status switch
    {
        ApiStatus.Running => "bg-success",
        ApiStatus.Deploying => "bg-warning",
        ApiStatus.Failed => "bg-danger",
        ApiStatus.Stopped => "bg-secondary",
        ApiStatus.Validating => "bg-info",
        ApiStatus.Updating => "bg-primary",
        _ => "bg-light text-dark"
    };

    private string GetStatusBorderClass(ApiStatus status) => status switch
    {
        ApiStatus.Running => "border-success",
        ApiStatus.Deploying => "border-warning",
        ApiStatus.Failed => "border-danger",
        ApiStatus.Stopped => "border-secondary",
        ApiStatus.Validating => "border-info",
        ApiStatus.Updating => "border-primary",
        _ => "border-light"
    };

    private string GetStatusIcon(ApiStatus status) => status switch
    {
        ApiStatus.Running => "??",
        ApiStatus.Deploying => "?",
        ApiStatus.Failed => "?",
        ApiStatus.Stopped => "??",
        ApiStatus.Validating => "??",
        ApiStatus.Updating => "??",
        _ => "??"
    };

    private string GetNotificationIcon(string type) => type switch
    {
        "success" => "bi-check-circle-fill text-success",
        "warning" => "bi-exclamation-triangle-fill text-warning",
        "error" => "bi-x-circle-fill text-danger",
        _ => "bi-info-circle-fill text-info"
    };

    private string GetNotificationBorderClass(string type) => type switch
    {
        "success" => "border-success",
        "warning" => "border-warning",
        "error" => "border-danger",
        _ => "border-info"
    };

    public async ValueTask DisposeAsync()
    {
        searchTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}